{"remainingRequest":"C:\\Users\\rbarrera\\Documents\\Proyectos\\ifyum\\app\\node_modules\\thread-loader\\dist\\cjs.js??ref--9-2!C:\\Users\\rbarrera\\Documents\\Proyectos\\ifyum\\app\\node_modules\\ts-loader\\index.js??ref--9-3!C:\\Users\\rbarrera\\Documents\\Proyectos\\ifyum\\app\\node_modules\\angular-router-loader\\src\\index.js!C:\\Users\\rbarrera\\Documents\\Proyectos\\ifyum\\app\\node_modules\\tslint-loader\\index.js!C:\\Users\\rbarrera\\Documents\\Proyectos\\ifyum\\app\\src\\main\\webapp\\app\\core\\auth\\user-route-access-service.ts","dependencies":[{"path":"C:\\Users\\rbarrera\\Documents\\Proyectos\\ifyum\\app\\src\\main\\webapp\\app\\core\\auth\\user-route-access-service.ts","mtime":1572998498762},{"path":"C:\\Users\\rbarrera\\Documents\\Proyectos\\ifyum\\app\\node_modules\\angular2-template-loader\\index.js","mtime":1486570058000},{"path":"C:\\Users\\rbarrera\\Documents\\Proyectos\\ifyum\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1564750574678},{"path":"C:\\Users\\rbarrera\\Documents\\Proyectos\\ifyum\\app\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1564750573341},{"path":"C:\\Users\\rbarrera\\Documents\\Proyectos\\ifyum\\app\\node_modules\\ts-loader\\index.js","mtime":1519365772000},{"path":"C:\\Users\\rbarrera\\Documents\\Proyectos\\ifyum\\app\\node_modules\\angular-router-loader\\src\\index.js","mtime":1512749902000},{"path":"C:\\Users\\rbarrera\\Documents\\Proyectos\\ifyum\\app\\node_modules\\tslint-loader\\index.js","mtime":1519899048000}],"contextDependencies":[],"result":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar core_1 = require(\"@angular/core\");\r\nvar router_1 = require(\"@angular/router\");\r\nvar _1 = require(\"../\");\r\nvar login_modal_service_1 = require(\"../login/login-modal.service\");\r\nvar state_storage_service_1 = require(\"./state-storage.service\");\r\nvar UserRouteAccessService = /** @class */ (function () {\r\n    function UserRouteAccessService(router, loginModalService, principal, stateStorageService) {\r\n        this.router = router;\r\n        this.loginModalService = loginModalService;\r\n        this.principal = principal;\r\n        this.stateStorageService = stateStorageService;\r\n    }\r\n    UserRouteAccessService.prototype.canActivate = function (route, state) {\r\n        var authorities = route.data['authorities'];\r\n        // We need to call the checkLogin / and so the principal.identity() function, to ensure,\r\n        // that the client has a principal too, if they already logged in by the server.\r\n        // This could happen on a page refresh.\r\n        return this.checkLogin(authorities, state.url);\r\n    };\r\n    UserRouteAccessService.prototype.checkLogin = function (authorities, url) {\r\n        var _this = this;\r\n        var principal = this.principal;\r\n        return Promise.resolve(principal.identity().then(function (account) {\r\n            if (!authorities || authorities.length === 0) {\r\n                return true;\r\n            }\r\n            if (account) {\r\n                return principal.hasAnyAuthority(authorities).then(function (response) {\r\n                    if (response) {\r\n                        return true;\r\n                    }\r\n                    if (core_1.isDevMode()) {\r\n                        console.error('User has not any of required authorities: ', authorities);\r\n                    }\r\n                    return false;\r\n                });\r\n            }\r\n            _this.stateStorageService.storeUrl(url);\r\n            _this.router.navigate(['iniciar-sesion']).then(function () {\r\n                // only show the login dialog, if the user hasn't logged in yet\r\n                if (!account) {\r\n                    // this.loginModalService.open();\r\n                    _this.router.navigate(['/iniciar-sesion']);\r\n                }\r\n            });\r\n            return false;\r\n        }));\r\n    };\r\n    UserRouteAccessService = tslib_1.__decorate([\r\n        core_1.Injectable({ providedIn: 'root' }),\r\n        tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof router_1.Router !== \"undefined\" && router_1.Router) === \"function\" && _a || Object, typeof (_b = typeof login_modal_service_1.LoginModalService !== \"undefined\" && login_modal_service_1.LoginModalService) === \"function\" && _b || Object, typeof (_c = typeof _1.Principal !== \"undefined\" && _1.Principal) === \"function\" && _c || Object, typeof (_d = typeof state_storage_service_1.StateStorageService !== \"undefined\" && state_storage_service_1.StateStorageService) === \"function\" && _d || Object])\r\n    ], UserRouteAccessService);\r\n    return UserRouteAccessService;\r\n    var _a, _b, _c, _d;\r\n}());\r\nexports.UserRouteAccessService = UserRouteAccessService;\r\n",{"version":3,"file":"C:\\Users\\rbarrera\\Documents\\Proyectos\\ifyum\\app\\src\\main\\webapp\\app\\core\\auth\\user-route-access-service.ts","sourceRoot":"","sources":["C:\\Users\\rbarrera\\Documents\\Proyectos\\ifyum\\app\\node_modules\\angular-router-loader\\src\\index.js!C:\\Users\\rbarrera\\Documents\\Proyectos\\ifyum\\app\\node_modules\\tslint-loader\\index.js!C:\\Users\\rbarrera\\Documents\\Proyectos\\ifyum\\app\\src\\main\\webapp\\app\\core\\auth\\user-route-access-service.ts"],"names":[],"mappings":";;;AAAA,sCAAsD;AACtD,0CAAmG;AAEnG,wBAAgC;AAChC,oEAAiE;AACjE,iEAA8D;AAG9D;IACI,gCACY,MAAc,EACd,iBAAoC,EACpC,SAAoB,EACpB,mBAAwC;QAHxC,WAAM,GAAN,MAAM,CAAQ;QACd,sBAAiB,GAAjB,iBAAiB,CAAmB;QACpC,cAAS,GAAT,SAAS,CAAW;QACpB,wBAAmB,GAAnB,mBAAmB,CAAqB;IACjD,CAAC;IAEJ,4CAAW,GAAX,UAAY,KAA6B,EAAE,KAA0B;QACjE,IAAM,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAC9C,wFAAwF;QACxF,gFAAgF;QAChF,uCAAuC;QACvC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,WAAW,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC;IACnD,CAAC;IAED,2CAAU,GAAV,UAAW,WAAqB,EAAE,GAAW;QAA7C,iBA+BC;QA9BG,IAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;QACjC,MAAM,CAAC,OAAO,CAAC,OAAO,CAClB,SAAS,CAAC,QAAQ,EAAE,CAAC,IAAI,CAAC,UAAA,OAAO;YAC7B,EAAE,CAAC,CAAC,CAAC,WAAW,IAAI,WAAW,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;gBAC3C,MAAM,CAAC,IAAI,CAAC;YAChB,CAAC;YAED,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;gBACV,MAAM,CAAC,SAAS,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,UAAA,QAAQ;oBACvD,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;wBACX,MAAM,CAAC,IAAI,CAAC;oBAChB,CAAC;oBACD,EAAE,CAAC,CAAC,gBAAS,EAAE,CAAC,CAAC,CAAC;wBACd,OAAO,CAAC,KAAK,CAAC,4CAA4C,EAAE,WAAW,CAAC,CAAC;oBAC7E,CAAC;oBACD,MAAM,CAAC,KAAK,CAAC;gBACjB,CAAC,CAAC,CAAC;YACP,CAAC;YAED,KAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;YACvC,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,IAAI,CAAC;gBAC1C,+DAA+D;gBAC/D,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;oBACX,iCAAiC;oBACjC,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC;gBAC9C,CAAC;YACL,CAAC,CAAC,CAAC;YACH,MAAM,CAAC,KAAK,CAAC;QACjB,CAAC,CAAC,CACL,CAAC;IACN,CAAC;IA/CQ,sBAAsB;QADlC,iBAAU,CAAC,EAAE,UAAU,EAAE,MAAM,EAAE,CAAC;qEAGX,eAAM,oBAAN,eAAM,sDACK,uCAAiB,oBAAjB,uCAAiB,sDACzB,YAAS,oBAAT,YAAS,sDACC,2CAAmB,oBAAnB,2CAAmB;OAL3C,sBAAsB,CAgDlC;IAAD,6BAAC;;CAAA,AAhDD,IAgDC;AAhDY,wDAAsB","sourcesContent":["import { Injectable, isDevMode } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot } from '@angular/router';\r\n\r\nimport { Principal } from '../';\r\nimport { LoginModalService } from '../login/login-modal.service';\r\nimport { StateStorageService } from './state-storage.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class UserRouteAccessService implements CanActivate {\r\n    constructor(\r\n        private router: Router,\r\n        private loginModalService: LoginModalService,\r\n        private principal: Principal,\r\n        private stateStorageService: StateStorageService\r\n    ) {}\r\n\r\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean | Promise<boolean> {\r\n        const authorities = route.data['authorities'];\r\n        // We need to call the checkLogin / and so the principal.identity() function, to ensure,\r\n        // that the client has a principal too, if they already logged in by the server.\r\n        // This could happen on a page refresh.\r\n        return this.checkLogin(authorities, state.url);\r\n    }\r\n\r\n    checkLogin(authorities: string[], url: string): Promise<boolean> {\r\n        const principal = this.principal;\r\n        return Promise.resolve(\r\n            principal.identity().then(account => {\r\n                if (!authorities || authorities.length === 0) {\r\n                    return true;\r\n                }\r\n\r\n                if (account) {\r\n                    return principal.hasAnyAuthority(authorities).then(response => {\r\n                        if (response) {\r\n                            return true;\r\n                        }\r\n                        if (isDevMode()) {\r\n                            console.error('User has not any of required authorities: ', authorities);\r\n                        }\r\n                        return false;\r\n                    });\r\n                }\r\n\r\n                this.stateStorageService.storeUrl(url);\r\n                this.router.navigate(['iniciar-sesion']).then(() => {\r\n                    // only show the login dialog, if the user hasn't logged in yet\r\n                    if (!account) {\r\n                        // this.loginModalService.open();\r\n                        this.router.navigate(['/iniciar-sesion']);\r\n                    }\r\n                });\r\n                return false;\r\n            })\r\n        );\r\n    }\r\n}\r\n"]}]}